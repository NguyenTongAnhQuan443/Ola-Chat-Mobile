1. Model (M): Đại diện cho dữ liệu ứng dụng.

2. View (V): Giao diện người dùng, chỉ nhận dữ liệu từ ViewModel.
class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Home")),
      body: Consumer<HomeViewModel>(
        builder: (context, viewModel, child) {
          if (viewModel.isLoading) return CircularProgressIndicator();
          return ListView.builder(
            itemCount: viewModel.users.length,
            itemBuilder: (context, index) {
              return ListTile(title: Text(viewModel.users[index].name));
            },
          );
        },
      ),
    );
  }
}

3. ViewModel (VM): Xử lý logic và cập nhật trạng thái UI.
class HomeViewModel extends ChangeNotifier {
  List<User> users = [];
  bool isLoading = false;

  Future<void> fetchUsers() async {
    isLoading = true;
    notifyListeners();

    await Future.delayed(Duration(seconds: 2)); // Fake API call
    users = [User(id: "1", name: "John Doe")];

    isLoading = false;
    notifyListeners();
  }
}

4. Binding View với ViewModel (Sử dụng Provider).
void main() {
  runApp(
    ChangeNotifierProvider(
      create: (context) => HomeViewModel()..fetchUsers(),
      child: MyApp(),
    ),
  );
}
