import 'dart:convert';
import 'package:olachat_mobile/config/api_config.dart';
import 'package:olachat_mobile/utils/app_styles.dart';
import 'package:olachat_mobile/view_models/list_conversation_view_model.dart';
import 'package:provider/provider.dart';
import 'package:stomp_dart_client/stomp_dart_client.dart';
import '../../main.dart';

class SocketService {
  // Singleton: ƒë·∫£m b·∫£o ch·ªâ t·∫°o m·ªôt instance duy nh·∫•t trong to√†n app
  static final SocketService _instance = SocketService._internal();

  // Factory constructor tr·∫£ v·ªÅ instance s·∫µn c√≥
  factory SocketService() => _instance;

  // Constructor private
  SocketService._internal();

  StompClient? _client; // Client d√πng ƒë·ªÉ k·∫øt n·ªëi WebSocket v·ªõi STOMP
  String? _accessToken; // Token x√°c th·ª±c cho k·∫øt n·ªëi WebSocket

  // H√†m kh·ªüi t·∫°o k·∫øt n·ªëi socket
  void init(String accessToken, {Function()? onConnectCallback}) {
    _accessToken = accessToken;

    final socketUrl = ApiConfig.socketUrl;

    _client = StompClient(
      config: StompConfig(
        url: socketUrl,
        onConnect: (frame) {
          print('${AppStyles.successIcon} Socket connected');
          if (onConnectCallback != null) onConnectCallback(); // G·ªçi callback khi k·∫øt n·ªëi xong
        },
        beforeConnect: () async {
          await Future.delayed(const Duration(milliseconds: 200)); // Delay nh·∫π tr∆∞·ªõc khi k·∫øt n·ªëi
        },
        onWebSocketError: (dynamic error) =>
            print('${AppStyles.successIcon}Socket Error: $error'), // B·∫Øt l·ªói k·∫øt n·ªëi

        // Header g·ª≠i k√®m khi k·∫øt n·ªëi socket (quan tr·ªçng v·ªõi b·∫£o m·∫≠t JWT)
        stompConnectHeaders: {
          'Authorization': 'Bearer $accessToken',
        },
        webSocketConnectHeaders: {
          'Authorization': 'Bearer $accessToken',
        },

        heartbeatOutgoing: const Duration(seconds: 10), // Ping g·ª≠i ƒëi
        heartbeatIncoming: const Duration(seconds: 10), // Ping nh·∫≠n v√†o
        reconnectDelay: const Duration(seconds: 5), // T·ª± ƒë·ªông reconnect n·∫øu r·ªõt m·∫°ng
      ),
    );

    _client!.activate(); // B·∫Øt ƒë·∫ßu k·∫øt n·ªëi
  }

  // ƒêƒÉng k√Ω l·∫Øng nghe m·ªôt topic c·ª• th·ªÉ t·ª´ server (d√πng STOMP)
  void subscribe(String destination, Function(Map<String, dynamic>) callback) {
    _client?.subscribe(
      destination: destination, // V√≠ d·ª•: /user/{conversationId}/private
      callback: (frame) {
        final body = jsonDecode(frame.body!); // Parse JSON t·ª´ tin nh·∫Øn
        callback(body); // G·ªçi callback ngo√†i truy·ªÅn d·ªØ li·ªáu

        onMessageReceived(body); // G·ªçi x·ª≠ l√Ω n·ªôi b·ªô (update UI)
      },
    );
  }

  // G·ª≠i tin nh·∫Øn t·ªõi server qua socket (STOMP)
  void sendMessage(String destination, Map<String, dynamic> body) {
    _client?.send(
      destination: destination,
      body: jsonEncode(body), // Convert JSON tr∆∞·ªõc khi g·ª≠i
    );
  }

  // G·ªçi khi nh·∫≠n tin nh·∫Øn qua socket ‚Üí c·∫≠p nh·∫≠t l·∫°i danh s√°ch h·ªôi tho·∫°i
  void onMessageReceived(Map<String, dynamic> messageData) {
    print("${AppStyles.successIcon}[SOCKET] G·ªçi onMessageReceived");

    final context = navigatorKey.currentContext; // L·∫•y context t·ª´ to√†n app

    if (context != null) {
      print("${AppStyles.successIcon}[SOCKET] C√≥ context, chu·∫©n b·ªã g·ªçi fetchConversations");

      // L·∫•y ViewModel ƒë·ªÉ c·∫≠p nh·∫≠t l·∫°i danh s√°ch h·ªôi tho·∫°i
      final vm = Provider.of<ListConversationViewModel>(context, listen: false);
      vm.updateConversationFromMessage(messageData); // Ch·ªâ update h·ªôi tho·∫°i li√™n quan
    } else {
      print("${AppStyles.failureIcon}[SOCKET] Kh√¥ng t√¨m th·∫•y context ƒë·ªÉ g·ªçi fetchConversations");
    }
  }

  // Ng·∫Øt k·∫øt n·ªëi socket
  void disconnect() {
    _client?.deactivate();
    print('üîå Socket disconnected');
  }

  // Ki·ªÉm tra socket c√≥ ƒëang k·∫øt n·ªëi kh√¥ng
  bool get isConnected => _client?.connected ?? false;
}
